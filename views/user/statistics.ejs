<div class="container-fluid py-4">
    <h1 class="mb-4">الإحصائيات والرسوم البيانية</h1>
    <form class="mb-4" id="periodForm" method="get" action="/user/statistics">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <label for="periodSelect" class="form-label">اختر الفترة</label>
                <select class="form-select" id="periodSelect" name="period">
                    <% periods.forEach(period => { %>
                        <option value="<%= period._id %>" <%= period._id.toString() === (selectedPeriodId || (activePeriod && activePeriod._id.toString())) ? 'selected' : '' %>>
                            فترة <%= period.leaderName %> (<%= new Date(period.startDate).toLocaleDateString() %> - <%= new Date(period.endDate).toLocaleDateString() %>)
                            <% if (activePeriod && period._id.toString() === activePeriod._id.toString()) { %> (نشط) <% } %>
                        </option>
                    <% }); %>
                </select>
            </div>
        </div>
    </form>
    <!-- 1. Total Normal, Other, Total for all Participants -->
    <div class="stats-section card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">إجمالي التكاليف (جميع المشاركين)</h5>
            <select id="costTypeSelect" class="form-select w-auto">
                <option value="all">الكل</option>
                <option value="normal">عادي</option>
                <option value="other">أخرى</option>
                <option value="total">الإجمالي</option>
            </select>
        </div>
        <div class="card-body">
            <canvas id="totalCostsChart" height="80"></canvas>
        </div>
    </div>
    <!-- 2. Ingredient Prices -->
    <div class="stats-section card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">أسعار المكونات مع مرور الوقت</h5>
            <select id="ingredientSelect" class="form-select w-auto">
                <option value="all">جميع المكونات</option>
            </select>
        </div>
        <div class="card-body">
            <canvas id="ingredientChart" height="80"></canvas>
        </div>
    </div>
    <!-- 3. Per-Participant Daily Cost -->
    <div class="stats-section card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">التكلفة اليومية للمشارك</h5>
            <select id="participantSelect" class="form-select w-auto">
                <option value="all">جميع المشاركين</option>
            </select>
        </div>
        <div class="card-body">
            <canvas id="participantDailyChart" height="80"></canvas>
        </div>
    </div>
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
    .stats-section { margin-bottom: 2rem; }
</style>
<script>
// These variables should be rendered from the backend
const statsData = <%- JSON.stringify(statsData || {}) %>;
const ingredientList = statsData.ingredients || [];
const participantList = statsData.participants || [];
const ingredientPricesOverTime = statsData.ingredientPricesOverTime || {};
const totalCostsOverTime = statsData.totalCostsOverTime || [];

// 1. Total Costs Over Time Chart
const costTypeSelect = document.getElementById('costTypeSelect');
let totalCostsChart;
function renderTotalCostsChart(type) {
    const ctx = document.getElementById('totalCostsChart').getContext('2d');
    let datasets = [];
    if (type === 'all') {
        datasets = [
            {
                label: 'عادي',
                data: totalCostsOverTime.map(d => d.normal),
                borderColor: '#6c757d',
                backgroundColor: 'rgba(108,117,125,0.1)',
                fill: false
            },
            {
                label: 'أخرى',
                data: totalCostsOverTime.map(d => d.other),
                borderColor: '#0dcaf0',
                backgroundColor: 'rgba(13,202,240,0.1)',
                fill: false
            },
            {
                label: 'الإجمالي',
                data: totalCostsOverTime.map(d => d.total),
                borderColor: '#0d6efd',
                backgroundColor: 'rgba(13,110,253,0.1)',
                fill: false
            }
        ];
    } else {
        let label, color;
        if (type === 'normal') { label = 'عادي'; color = '#6c757d'; }
        if (type === 'other') { label = 'أخرى'; color = '#0dcaf0'; }
        if (type === 'total') { label = 'الإجمالي'; color = '#0d6efd'; }
        datasets = [{
            label,
            data: totalCostsOverTime.map(d => d[type]),
            borderColor: color,
            backgroundColor: color + '33',
            fill: false
        }];
    }
    if (totalCostsChart) totalCostsChart.destroy();
    totalCostsChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: totalCostsOverTime.map(d => d.date),
            datasets
        },
        options: { responsive: true, plugins: { legend: { display: true } } }
    });
}
costTypeSelect.addEventListener('change', e => renderTotalCostsChart(e.target.value));
renderTotalCostsChart('all');

// 2. Ingredient Prices Over Time Chart
const ingredientSelect = document.getElementById('ingredientSelect');
ingredientList.forEach(ing => {
    const opt = document.createElement('option');
    opt.value = ing.name;
    opt.textContent = ing.name;
    ingredientSelect.appendChild(opt);
});
let ingredientChart;
function renderIngredientChart(selected) {
    const ctx = document.getElementById('ingredientChart').getContext('2d');
    let datasets = [];
    if (selected === 'all') {
        datasets = ingredientList.map(ing => ({
            label: ing.name,
            data: (ingredientPricesOverTime[ing.name] || []).map(d => d.price),
            borderColor: '#' + Math.floor(Math.random()*16777215).toString(16),
            fill: false
        }));
    } else {
        datasets = [{
            label: selected,
            data: (ingredientPricesOverTime[selected] || []).map(d => d.price),
            borderColor: '#0d6efd',
            fill: false
        }];
    }
    if (ingredientChart) ingredientChart.destroy();
    ingredientChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: (ingredientPricesOverTime[selected === 'all' ? ingredientList[0]?.name : selected] || []).map(d => d.date),
            datasets
        },
        options: { responsive: true, plugins: { legend: { display: true } } }
    });
}
ingredientSelect.addEventListener('change', e => renderIngredientChart(e.target.value));
renderIngredientChart('all');

// 3. Participant Daily Cost Chart
const participantSelect = document.getElementById('participantSelect');
participantList.forEach(p => {
    const opt = document.createElement('option');
    opt.value = p.name;
    opt.textContent = p.name;
    participantSelect.appendChild(opt);
});
let participantDailyChart;
function renderParticipantDailyChart(selected) {
    let data;
    if (selected === 'all') {
        // Show average daily cost for all participants
        data = statsData.dailyCostsAll || [];
    } else {
        // Show daily cost for selected participant
        data = (statsData.dailyCostsByParticipant && statsData.dailyCostsByParticipant[selected]) || [];
    }
    const ctx = document.getElementById('participantDailyChart').getContext('2d');
    if (participantDailyChart) participantDailyChart.destroy();
    participantDailyChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: data.map(d => d.date),
            datasets: [{
                label: 'التكلفة اليومية',
                data: data.map(d => d.cost),
                backgroundColor: '#0dcaf0',
                borderColor: '#0dcaf0',
                fill: false
            }]
        },
        options: { responsive: true, plugins: { legend: { display: true } } }
    });
}
participantSelect.addEventListener('change', e => renderParticipantDailyChart(e.target.value));
renderParticipantDailyChart('all');

// Period select reload
document.getElementById('periodSelect').addEventListener('change', function() {
    document.getElementById('periodForm').submit();
});
</script> 